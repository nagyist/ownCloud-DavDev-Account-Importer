import com.github.spotbugs.snom.SpotBugsTask

repositories {
    google()
    maven { url "https://jitpack.io" }
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
}

apply plugin: 'com.android.library'
apply plugin: "com.github.spotbugs"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: 'maven-publish' // needed for JitPack.io

group = 'com.github.nextcloud'

spotbugs {
    toolVersion = '3.1.12'
    ignoreFailures = true
}

configurations {
    ktlint
}

android {
    namespace 'com.nextcloud.android.sso'
    compileSdk 34

    defaultConfig {
        minSdk 21
        targetSdk 34
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    buildFeatures {
        aidl true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }

    productFlavors {}

    lint {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation', 'MissingQuantity', 'InconsistentArrays', 'TypographyEllipsis', 'GradleDependency', 'VectorPath', 'IconMissingDensityFolder', 'IconDensities'
        htmlOutput file("$project.layout.buildDirectory/reports/lint/lint.html")
        htmlReport true
    }

    tasks.register("spotbugsDebugReport", SpotBugsTask) {
        ignoreFailures = true
        effort = "max"
        reportLevel = "medium"
        classes = fileTree("$project.layout.buildDirectory/intermediates/javac/debug/classes/")
        excludeFilter = file("${project.rootDir}/spotbugs-filter.xml")

        reports {
            xml.enabled = false
            html {
                enabled = true
                destination = file("$project.layout.buildDirectory/reports/spotbugs/spotbugs.html")
            }
        }
    }
}

tasks.register('ktlint', JavaExec) {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "--reporter=plain", "--reporter=plain,output=${project.layout.buildDirectory}/ktlint.txt,src/**/*.kt"
}

detekt {
    reports {
        xml {
            enabled = false
        }
    }
    config = files("detekt.yml")
    input = files("src/")
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation 'androidx.annotation:annotation:1.7.1'
    implementation 'androidx.core:core:1.12.0'
    implementation 'androidx.fragment:fragment:1.6.2'

    implementation 'com.google.android.material:material:1.11.0'

    compileOnly "org.projectlombok:lombok:1.18.30"
    annotationProcessor "org.projectlombok:lombok:1.18.30"

    api 'com.google.code.gson:gson:2.10.1'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.8'

    implementation 'commons-io:commons-io:2.15.1'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
    spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.6.4'

    ktlint "com.pinterest:ktlint:0.51.0-FINAL"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.9.0'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.nextcloud.android.sso'
                artifactId = 'master'
            }
        }
    }
}
